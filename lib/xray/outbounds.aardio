//outbounds 出站代理
import web.json;
import inet.url;
import win.clip;
import crypt;

namespace xray.outbounds;

exportSharedLinks = function(outbounds){
	var outString = {};
	for i,outbound in ..table.eachIndex(outbounds){
		if(outbound.protocol == "vmess"){
			var json = ..web.json.stringify({
				v = 2;
				add = outbound.address;
				aid = outbound.alterId;
				id = outbound.id; 
				port = outbound.port;
				net = outbound.network;
				type = outbound.type;
				path = outbound.path;
				host = outbound.host;
				tls = outbound.tls;
				ps = outbound.ps;
			})
			
			var vmess = "vmess://" + ..crypt.encodeBin(json);
			..table.push(outString,vmess);
		}
		elseif(outbound.protocol == "shadowsocks"){
			var ss = "ss://" + ..crypt.encodeBin( outbound.security + ":" + outbound.id + "@" + outbound.address + ":" + outbound.port) + "#" + outbound.address + ":" + outbound.port;
			..table.push(outString,ss);
		} 
		elseif(outbound.protocol == "trojan"  || outbound.protocol == "trojan-go"){
			var trojan = outbound.protocol + "://" + outbound.id + "@" + outbound.address + ":" + outbound.port;
			 
			var info = {};
			if(outbound.network!="tcp") info.type = outbound.network;
			if(outbound.sni){ info.sni = outbound.sni;}
			info.host = outbound.host;
			info.path = outbound.path;
			
			if(..table.count(info)){
				trojan = ..inet.url.appendExtraInfo(trojan,info) 
			}
				 
			if(outbound.ps){
				trojan = trojan + "#" + ..inet.url.encode(outbound.ps);
			} 
			..table.push(outString,trojan);
		} 
		elseif(outbound.protocol == "vless"){
			var vless = "vless://" + outbound.id + "@" + outbound.address + ":" + outbound.port;
			 
			var info = {};
			if(outbound.network!="tcp") info.network = outbound.network;
			if(outbound.security!="none") info.security = outbound.security; 
			if(outbound.tls) info.tls = outbound.tls;
			if(outbound.flow) info.flow = outbound.flow;
			if(outbound.allowInsecure!==null) info.allowInsecure = outbound.allowInsecure;
			if(outbound.alpn) info.alpn = outbound.alpn;
			if(outbound.disableSessionResumption) info.disableSessionResumption = outbound.disableSessionResumption;
			if(outbound.sni){ info.sni = outbound.sni;}
			info.host = outbound.host;
			info.path = outbound.path;  
			
			if(..table.count(info)){
				vless = ..inet.url.appendExtraInfo(vless,info) 
			}
				 
			if(outbound.ps){
				vless = vless + "#" + ..inet.url.encode(outbound.ps);
			} 
			..table.push(outString,vless);
		} 
	}	
	
	return ..string.join(outString,'\r\n');
}

importFromString = function(str){ 
	if(!str){ return; }
	
	str = ..string.trim(str);
	
	if( ..string.match(str,"%\[\]") ){
		var cfg = ..web.json.tryParse(str);
		if(type(cfg)==type.table && #cfg){
			return cfg;	
		}
	}
	
	var subscribeUrl;
	if( ..string.startWith(str,"http://") || ..string.startWith(str,"https://")  ){
		
		import win.dlg.message;
		var msgDlg = win.dlg.message(..mainForm); 
		var form = msgDlg.create('正在获取订阅源 ... ',,true)
		form.progress.startProgress(50); 
		
		subscribeUrl = str;
		str = ..win.invoke(
			function(subscribeUrl){
				import inet.http; 
				return inet.http().get(subscribeUrl); 
			},subscribeUrl 
		)
		
		form.close();
		if(!str){
			return;
		}
	}
	
	if(..string.match(str,"^[\w=+/-_]+$")){
		str = ..crypt.decodeBin(str);
		if(!str) return;
	}
	
	var outbounds = ..table.array();
	for(line in ..string.lines(str) ){
		if(#outbounds>=100){
			import win.dlg.message;
			var msgDlg = win.dlg.message(..mainForm); 
			var form = msgDlg.warn("导入的节点数目过多，已中止！")
		
			return outbounds;
		}
		
		if(line[1]=='/'# && line[2]=='/'#){
			continue;
		}

		var vmess = ..string.match(line,`vmess\:\/\/([\w=+]+)`);
		if( vmess ) {  
			var json = ..crypt.decodeBin(vmess);	
			var outbound = ..web.json.tryParse(json);	
			if(outbound){
				..table.clear(outbound@._defined);
				outbound.protocol = "vmess";
				outbound.address = outbound.add;
				outbound.alterId = tonumber(outbound.aid);
				outbound.security = "auto";
				outbound.network = outbound.net : "tcp";
				outbound.net = null;
				outbound.add = null;
				outbound.aid = null;
				outbound.v = null;
				outbound.subscribeUrl = subscribeUrl;
				
				if(outbound.ps){
					var u,h,p = ..string.match(outbound.ps,"(.+)\@(.+)\:(\d+)")
					if(u&&h&&p){
						if(h && ..string.endWith(h,"jamjams.net") && subscribeUrl && ..string.match(subscribeUrl,"justmysocks\d+\.net")){
							if(..string.match(outbound.address,"^\d+\.\d+\.\d+\.\d+$") ){
								outbound.address = h;
							}
						}
						outbound.ps = h;
					}	
				}
				..table.push(outbounds,outbound);
			} 
			
			continue;
		}	
		
		var vless = ..string.match(line,`vless\:\/\/[^\@\s]+\@[^\?\#\s\:]+\:\d+\S*`);
		if( vless ) {
			var vlessUrl = ..inet.url.split(vless) 
			if(vlessUrl.user && vlessUrl.host && vlessUrl.port){
				var outbound = {
					address = vlessUrl.host;
					port = tonumber(vlessUrl.port) : 443; 
					id = vlessUrl.user;
					network = "tcp";
					protocol = "vless";
					tls = "tls";
				};
				
				if(vlessUrl.extraInfo){
					var info = ..inet.url.splitParameters(vlessUrl.extraInfo);
					outbound.sni = info.sni;
					outbound.host = info.host;
					outbound.path = info.path;
					outbound.network = info.network
					outbound.security = info.security; 
					if(info.tls) outbound.tls = info.tls;
					if(info.flow) outbound.flow = info.flow;
					if(info.allowInsecure!==null) outbound.allowInsecure = info.allowInsecure;
					if(info.disableSessionResumption) outbound.disableSessionResumption = info.disableSessionResumption;
					if(info.alpn) outbound.alpn = info.alpn;	 
				}
				
				if(vlessUrl.location){
					outbound.ps = ..inet.url.decode(vlessUrl.location);
				}
	
				outbound.subscribeUrl = subscribeUrl;
				..table.push(outbounds,outbound);
			} 
			
			continue;
		}

		var ss,comment = ..string.match(line,`ss\:\/\/([\w=+]+)(<#\S+>?)`);
		if( ss ) {   
			var ss = ..crypt.decodeBin(ss); 
			var method,password,address,port = ..string.match(ss,"^(.+)\:(.+)\@(.+)\:(\d+)")	 
	
			if(address && password && port){
				var outbound = {
					address = address;
					port = tonumber(port);
					security = method;
					id = password;
					network = "tcp";
					protocol = "shadowsocks"
				};
				
				if(comment){
					comment = ..string.right(comment,-2);
					comment = ..inet.url.decode(comment);
					var u,h,p = ..string.match(comment,"(.+)\@(.+)\:(\d+)")
					if(u&&h&&p){
						if(h && ..string.endWith(h,"jamjams.net") && subscribeUrl && ..string.match(subscribeUrl,"justmysocks\d+\.net")){
							if(..string.match(outbound.address,"^\d+\.\d+\.\d+\.\d+$") ){
								outbound.address = h;
							}
						}

						comment = h;
					}
					
					outbound.ps = comment;
				}
	
				outbound.subscribeUrl = subscribeUrl;
				..table.push(outbounds,outbound);
			} 
			
			continue;
		}

		var trojan = ..string.match(line,`trojan\:\/\/[^\@\s]+\@[^\?\#\s\:]+\:\d+\S*`);
		if( trojan ) {
			var trojanUrl = ..inet.url.split(trojan) 
			if(trojanUrl.user && trojanUrl.host && trojanUrl.port){
				var outbound = {
					address = trojanUrl.host;
					port = tonumber(trojanUrl.port) : 443; 
					id = trojanUrl.user;
					network = "tcp";
					protocol = "trojan"
				};
				
				if(trojanUrl.extraInfo){
					var info = ..inet.url.splitParameters(trojanUrl.extraInfo);
					outbound.sni = info.sni || info.peer;
					
					outbound.host = info.host;
					outbound.path = info.path;
					
					if(info.type && info.type!=="original"){
						outbound.network = info.type;
						if(outbound.network=="h2"){
							outbound.network="http"
						}
					}
					
					outbound.security = info.encryption;
				}
				
				if(trojanUrl.location){
					outbound.ps = ..inet.url.decode(trojanUrl.location);
				}
	
				outbound.subscribeUrl = subscribeUrl;
				..table.push(outbounds,outbound);
			} 
			
			continue;
		}

		var trojan = ..string.match(line,`trojan-go\:\/\/[^\@\s]+\@[^\?\#\s\:]+\:\d+\S*`);
		if( trojan ) {
			var trojanUrl = ..inet.url.split(trojan) 
			if(trojanUrl.user && trojanUrl.host && trojanUrl.port){
				var outbound = {
					address = trojanUrl.host;
					port = tonumber(trojanUrl.port) : 443; 
					id = trojanUrl.user;
					network = "tcp";
					protocol = "trojan-go"
				};
				
				if(trojanUrl.extraInfo){
					var info = ..inet.url.splitParameters(trojanUrl.extraInfo);
					outbound.sni = info.sni || info.peer;
					outbound.host = info.host;
					outbound.path = info.path;
					
					if(info.type && info.type!=="original"){
						outbound.network = info.type;
						if(outbound.network=="h2"){
							outbound.network="http"
						}
					}
					
					outbound.security = info.encryption; 
				}
				
				if(trojanUrl.location){
					outbound.ps = ..inet.url.decode(trojanUrl.location);
				}
	
				outbound.subscribeUrl = subscribeUrl;
				..table.push(outbounds,outbound);
			} 
			
			continue;
		}
		
		var json = ..string.match(line,`^\s*%\{\}\s*$`);
		if( json ) {
			var outbound  = ..web.json.tryParse(json)
			if(outbound){
				if(outbound.aid){
					outbound.alterId = outbound.aid;
					outbound.aid = null;
				}
				
				if(outbound.add){
					outbound.address = outbound.add;
					outbound.add = null;
					..table.define(outbound);
				}
			
			
			 	if(outbound.net){
					outbound.network = outbound.net;
					outbound.net = null;
					..table.define(outbound);
				}
				
				if(outbound.peer && #outbound.peer){
					outbound.sni = outbound.peer;
					outbound.peer = null;
					..table.define(outbound);
				}
				
				if(!outbound.security){
					if(outbound.method && outbound.method!="none"){
						outbound.security = outbound.method;
						outbound.method = null;
						..table.define(outbound);
					}
				}
				
				if(!outbound.protocol){
					outbound.protocol = "vmess";
					if(outbound.ps && ..string.find(outbound.ps,"@@vless")){
						outbound.protocol = "vless";
					}
				}
				
				outbound.v = null;
				..table.push(outbounds,outbound );
				continue;
			}
		}
	}
	
	return outbounds;
}

importFromClipboard  = function(){ 
	var str = ..win.clip.read();
	if(!str){ return; }
	
	return importFromString(str);
}

/**intellisense(xray.outbounds)
exportSharedLinks(.(outbounds) = 导出分享链接
importFromString(.(str) = 导入分享链接
importFromClipboard() = 自剪贴板导入分享链接
end intellisense**/
